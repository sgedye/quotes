{"version":3,"sources":["index.js"],"names":["QuoteMachine","state","quoteData","id","quote","author","getNewQuote","bind","randomId","Math","floor","random","this","length","document","getElementById","innerHTML","e","preventDefault","console","log","index","quoteValue","className","QuoteComponent","key","quoteObj","AuthorComponent","FooterComponent","React","Component","props","alt","onClick","ReactDOM","render"],"mappings":"sLAIMA,G,kBACJ,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,UAAY,CACV,CACEC,GAAI,EACJC,MAAO,+FACPC,OAAQ,cAEV,CACEF,GAAI,EACJC,MAAO,4EACPC,OAAQ,WAEV,CACEF,GAAI,EACJC,MAAO,6FACPC,OAAQ,aAEV,CACEF,GAAI,EACJC,MAAO,6HACPC,OAAQ,iBAEV,CACEF,GAAI,EACJC,MAAO,oGACPC,OAAQ,YAEV,CACEF,GAAI,EACJC,MAAO,wHACPC,OAAQ,YAEV,CACEF,GAAI,EACJC,MAAO,wEACPC,OAAQ,oBAEV,CACEF,GAAI,EACJC,MAAO,6FACPC,OAAQ,cAEV,CACEF,GAAI,EACJC,MAAO,+GACPC,OAAQ,kBAId,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAnDP,E,2EAsDZ,IAAMC,EAAWC,KAAKC,MAAMD,KAAKE,SAAWC,KAAKX,MAAMC,UAAUW,QACjEC,SAASC,eAAe,QAAQC,UAC/BJ,KAAKX,MAAMC,UAAUM,GAAUJ,MAChCU,SAASC,eAAe,UAAUC,UAAlC,aACOJ,KAAKX,MAAMC,UAAUM,GAAUH,U,iCAE7BY,GACTA,EAAEC,iBACFC,QAAQC,IAAR,oC,+BAGA,IAAMC,EAAQZ,KAAKC,MAAMD,KAAKE,SAAWC,KAAKX,MAAMC,UAAUW,QACxDS,EAAaV,KAAKX,MAAMC,UAAUmB,GACxC,OACE,yBAAKE,UAAU,WACb,kBAACC,EAAD,CACEC,IAAKH,EAAWnB,GAChBuB,SAAUJ,IAEZ,kBAACK,EAAD,CACEF,IAAKH,EAAWnB,GAChBuB,SAAUJ,IAEZ,kBAACM,EAAD,CACEH,IAAKH,EAAWnB,GAChBG,YAAaM,KAAKN,mB,GAhFDuB,IAAMC,YAsFjC,SAASN,EAAeO,GACtB,OACE,8BACE,uBAAGR,UAAU,oBAAoBS,IAAI,MACrC,uBAAG7B,GAAG,QAAQ4B,EAAML,SAAStB,OAC7B,uBAAGmB,UAAU,qBAAqBS,IAAI,OAI5C,SAASL,EAAgBI,GACvB,OACE,uBAAG5B,GAAG,UAAN,MAAmB4B,EAAML,SAASrB,QAGtC,SAASuB,EAAgBG,GACvB,OACE,yBAAK5B,GAAG,gBACN,4BAAQA,GAAG,YAAY8B,QAAS,kBAAMF,EAAMzB,gBAA5C,cAIN4B,IAASC,OAAO,kBAACnC,EAAD,MAAkBc,SAASC,eAAe,e","file":"static/js/main.8ae5e362.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom'\nimport './index.scss';\n\nclass QuoteMachine extends React.Component {\n  constructor() {\n    super()\n    this.state = { \n      quoteData : [\n        {\n          id: 1,\n          quote: \"The man who thinks he can and the man who thinks he can't are both right. Which one are you?\",\n          author: \"Henry Ford\"\n        },\n        {\n          id: 2,\n          quote: \"Care about what other people think and you will always be their prisoner.\",\n          author: \"Lau Tzu\"     \n        },\n        {\n          id: 3,\n          quote: \"It is the mark of an educated mind to be able to entertain a thought without accepting it.\",\n          author: \"Aristotle\"\n        },\n        {\n          id: 4,\n          quote: \"What man actually needs is not some tension-less state but rather the striving and struggling for some goal worthy of him.\",\n          author: \"Viktor Frankl\"\n        },\n        {\n          id: 5,\n          quote: \"He who is not contented with what he has, would not be contented with what he would like to have.\",\n          author: \"Socrates\"\n        },\n        {\n          id: 6,\n          quote: \"Death does not concern us, because as long as we exist, death is not here. And when it does come, we no longer exist.\",\n          author: \"Epicurus\"\n        },\n        {\n          id: 7,\n          quote: \"Every man I meet is my superior in some way. In that, I learn of him.\",\n          author: \"Ralph W. Emerson\"\n        },\n        {\n          id: 8,\n          quote: \"Some people get an education without going to college; the rest get it after they get out.\",\n          author: \"Mark Twain\"\n        },\n        {\n          id: 9,\n          quote: \"If we don’t believe in freedom of expression for people we despise, we don’t believe in it at all.\",\n          author: \"Noam Chomsky\"\n        }\n      ]\n    }\n    this.getNewQuote = this.getNewQuote.bind(this)\n  }\n  getNewQuote() {\n    const randomId = Math.floor(Math.random() * this.state.quoteData.length)\n    document.getElementById(\"text\").innerHTML = \n    \tthis.state.quoteData[randomId].quote\n    document.getElementById(\"author\").innerHTML = \n    \t`-- ${this.state.quoteData[randomId].author}`\n  }\n  tweetQuote(e) {\n    e.preventDefault()\n    console.log(`This button has been disabled.`)\n  }\n  render() {\n    const index = Math.floor(Math.random() * this.state.quoteData.length)\n    const quoteValue = this.state.quoteData[index]\n    return (\n      <div className=\"wrapper\">\n        <QuoteComponent\n          key={quoteValue.id}\n          quoteObj={quoteValue}\n        />\n        <AuthorComponent\n          key={quoteValue.id}\n          quoteObj={quoteValue}\n        />\n        <FooterComponent\n          key={quoteValue.id}\n          getNewQuote={this.getNewQuote}\n        />\n      </div>\n    )\n  }\n}\nfunction QuoteComponent(props) {\n  return (\n    <span>\n      <i className=\"fas fa-quote-left\" alt=\"&quot;\" />\n      <p id=\"text\">{props.quoteObj.quote}</p>\n      <i className=\"fas fa-quote-right\" alt=\"&quot;\" />\n    </span>\n  )\n}\nfunction AuthorComponent(props) {\n  return (\n    <p id=\"author\">-- {props.quoteObj.author}</p>\n  )\n}\nfunction FooterComponent(props) {\n  return (\n    <div id=\"quote-footer\">\n      <button id=\"new-quote\" onClick={() => props.getNewQuote()}>New quote</button>\n    </div>\n  )\n}\nReactDOM.render(<QuoteMachine />, document.getElementById(\"quote-box\"));"],"sourceRoot":""}